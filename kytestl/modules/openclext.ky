const OpenCLOp := enum {
	// Section 2.1: Math extended instructions	OPENCLAcos := 0,
	OPENCLAcosh := 1,
	OPENCLAcospi := 2,
	OPENCLAsin := 3,
	OPENCLAsinh := 4,
	OPENCLAsinpi := 5,
	OPENCLAtan := 6,
	OPENCLAtan2 := 7,
	OPENCLAtanh := 8,
	OPENCLAtanpi := 9,
	OPENCLAtan2pi := 10,
	OPENCLCbrt := 11,
	OPENCLCeil := 12,
	OPENCLCopysign := 13,
	OPENCLCos := 14,
	OPENCLCosh := 15,
	OPENCLCospi := 16,
	OPENCLErfc := 17,
	OPENCLErf := 18,
	OPENCLExp := 19,
	OPENCLExp2 := 20,
	OPENCLExp10 := 21,
	OPENCLExpm1 := 22,
	OPENCLFabs := 23,
	OPENCLFdim := 24,
	OPENCLFloor := 25,
	OPENCLFma := 26,
	OPENCLFmax := 27,
	OPENCLFmin := 28,
	OPENCLFmod := 29,
	OPENCLFract := 30, 
	OPENCLFrexp := 31,
	OPENCLHypot := 32,
	OPENCLIlogb := 33,
	OPENCLLdexp := 34,
	OPENCLLgamma := 35,
	OPENCLLgamma_r := 36,
	OPENCLLog := 37,
	OPENCLLog2 := 38,
	OPENCLLog10 := 39,
	OPENCLLog1p := 40,
	OPENCLLogb := 41,
	OPENCLMad := 42,
	OPENCLMaxmag := 43,
	OPENCLMinmag := 44,
	OPENCLModf := 45,
	OPENCLNan := 46,
	OPENCLNextafter := 47,
	OPENCLPow := 48,
	OPENCLPown := 49,
	OPENCLPowr := 50,
	OPENCLRemainder := 51,
	OPENCLRemquo := 52,
	OPENCLRint := 53,
	OPENCLRootn := 54,
	OPENCLRound := 55,
	OPENCLRsqrt := 56,
	OPENCLSin := 57,
	OPENCLSincos := 58,
	OPENCLSinh := 59,
	OPENCLSinpi := 60,
	OPENCLSqrt := 61,
	OPENCLTan := 62,
	OPENCLTanh := 63,
	OPENCLTanpi := 64,
	OPENCLTgamma := 65,
	OPENCLTrunc := 66,
	OPENCLHalf_cos := 67,
	OPENCLHalf_divide := 68,
	OPENCLHalf_exp := 69,
	OPENCLHalf_exp2 := 70,
	OPENCLHalf_exp10 := 71,
	OPENCLHalf_log := 72,
	OPENCLHalf_log2 := 73,
	OPENCLHalf_log10 := 74,
	OPENCLHalf_powr := 75,
	OPENCLHalf_recip := 76,
	OPENCLHalf_rsqrt := 77,
	OPENCLHalf_sin := 78,
	OPENCLHalf_sqrt := 79,
	OPENCLHalf_tan := 80,
	OPENCLNative_cos := 81,
	OPENCLNative_divide := 82,
	OPENCLNative_exp := 83,
	OPENCLNative_exp2 := 84,
	OPENCLNative_exp10 := 85,
	OPENCLNative_log := 86,
	OPENCLNative_log2 := 87,
	OPENCLNative_log10 := 88,
	OPENCLNative_powr := 89,
	OPENCLNative_recip := 90,
	OPENCLNative_rsqrt := 91,
	OPENCLNative_sin := 92,
	OPENCLNative_sqrt := 93,
	OPENCLNative_tan := 94,

	// Section 2.2: Integer instructions	OPENCLSAbs := 141,
	OPENCLSAbs_diff := 142,
	OPENCLSAdd_sat := 143,
	OPENCLUAdd_sat := 144,
	OPENCLSHadd := 145,
	OPENCLUHadd := 146,
	OPENCLSRhadd := 147,
	OPENCLURhadd := 148,
	OPENCLSClamp := 149,
	OPENCLUClamp := 150, 
	OPENCLClz := 151,
	OPENCLCtz := 152,    
	OPENCLSMad_hi := 153,
	OPENCLUMad_sat := 154,
	OPENCLSMad_sat := 155,
	OPENCLSMax := 156,
	OPENCLUMax := 157,
	OPENCLSMin := 158,
	OPENCLUMin := 159,
	OPENCLSMul_hi := 160,
	OPENCLRotate := 161,
	OPENCLSSub_sat := 162,
	OPENCLUSub_sat := 163,
	OPENCLU_Upsample := 164,
	OPENCLS_Upsample := 165,
	OPENCLPopcount := 166,
	OPENCLSMad24 := 167,
	OPENCLUMad24 := 168,
	OPENCLSMul24 := 169,
	OPENCLUMul24 := 170,
	OPENCLUAbs := 201,
	OPENCLUAbs_diff := 202,
	OPENCLUMul_hi := 203,
	OPENCLUMad_hi := 204,

	// Section 2.3: Common instructions	OPENCLFClamp := 95,
	OPENCLDegrees := 96,
	OPENCLFMax_common := 97,
	OPENCLFMin_common := 98, 
	OPENCLMix := 99,
	OPENCLRadians := 100,
	OPENCLStep := 101,
	OPENCLSmoothstep := 102,
	OPENCLSign := 103,

	// Section 2.4: Geometric instructions	OPENCLCross := 104,
	OPENCLDistance := 105, 
	OPENCLLength := 106,
	OPENCLNormalize := 107,
	OPENCLFast_distance := 108,
	OPENCLFast_length := 109,
	OPENCLFast_normalize := 110,

	// Section 2.5: Relational instructions	OPENCLBitselect := 186,
	OPENCLSelect := 187,

	// Section 2.6: Vector Data Load and Store instructions	OPENCLVloadn := 171,
	OPENCLVstoren := 172,
	OPENCLVload_half := 173,
	OPENCLVload_halfn := 174,
	OPENCLVstore_half := 175,
	OPENCLVstore_half_r := 176,
	OPENCLVstore_halfn := 177,
	OPENCLVstore_halfn_r := 178,
	OPENCLVloada_halfn := 179,
	OPENCLVstorea_halfn := 180,
	OPENCLVstorea_halfn_r := 181,

	// Section 2.7: Miscellaneous Vector instructions	OPENCLShuffle := 182,
	OPENCLShuffle2 := 183,

	// Section 2.8: Misc instructions	OPENCLPrintf := 184,
	OPENCLPrefetch := 185,
};

const OPEN_CL_EXT_INST := __spirv_include("OpenCL.std");

inline __spirv_opencl :: (op : OpenCLOp, r : &T<any>, params : any...) $ {
	__spirv(OpExtInst, T, r, OPEN_CL_EXT_INST, op, params...);
};
