// Kyte Standard Library
const glsl := include("glslext.ky");

// Types
// Mat
const mat2b := bool[2][2];
const mat3b := bool[3][3];
const mat4b := bool[4][4];
const mat2i := int[2][2];
const mat3i := int[3][3];
const mat4i := int[4][4];
const mat2u := uint[2][2];
const mat3u := uint[3][3];
const mat4u := uint[4][4];
const mat2f := float[2][2];
const mat3f := float[3][3];
const mat4f := float[4][4];
const mat2d := double[2][2];
const mat3d := double[3][3];
const mat4d := double[4][4];

const mat2 := <mat2b, mat2i, mat2u, mat2f, mat2d>;
const mat3 := <mat3b, mat3i, mat3u, mat3f, mat3d>;
const mat4 := <mat4b, mat4i, mat4u, mat4f, mat4d>;

const matb := <mat2b, mat3b, mat4b>;
const mati := <mat2i, mat3i, mat4i>;
const matu := <mat2u, mat3u, mat4u>;
const matf := <mat2f, mat3f, mat4f>;
const matd := <mat2d, mat3d, mat4d>;

const matn := <mat2, mat3, mat4>;

// Vec
const vec2b := bool[2];
const vec3b := bool[3];
const vec4b := bool[4];
const vec2i := int[2];
const vec3i := int[3];
const vec4i := int[4];
const vec2u := uint[2];
const vec3u := uint[3];
const vec4u := uint[4];
const vec2f := float[2];
const vec3f := float[3];
const vec4f := float[4];
const vec2d := double[2];
const vec3d := double[3];
const vec4d := double[4];

const vec2 := <vec2b, vec2i, vec2u, vec2f, vec2d>;
const vec3 := <vec3b, vec3i, vec3u, vec3f, vec3d>;
const vec4 := <vec4b, vec4i, vec4u, vec4f, vec4d>;

const vecb := <vec2b, vec3b, vec4b>;
const veci := <vec2i, vec3i, vec4i>;
const vecu := <vec2u, vec3u, vec4u>;
const vecf := <vec2f, vec3f, vec4f>;
const vecd := <vec2d, vec3d, vec4d>;

const vecn := <vec2, vec3, vec4>;

// Scalar
const whole := <int, uint>;
const fractional := <float, double>;
const numeric := <whole, fractional>;
const scalar := <bool, numeric>;

// Sampler
const sampler := <sampler2D, sampler3D>;

// Functions
@iknowwhatimdoing
@inline
@export
const cos := (t : float) $ r : float {
  glsl.op(glsl.Cos, r, t);
};

// Misc
const cast := (value : any, T : type) $ T
{
	return (T)value;
}

const typeof := (var : T<any>) $ type
{
	return T;
}
